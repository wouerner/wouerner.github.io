Claro! Abaixo está o conteúdo formatado como artigo de opinião, com título, introdução, desenvolvimento e conclusão, mantendo todo o conteúdo original (apenas com ajustes gramaticais e estruturais para maior clareza e fluidez).


---

A Falsa Condenação do Projeto Legado: Hype, Incompetência ou Falta de Visão?

Não, vamos lá. Deixa eu falar aqui sobre isso.

Não existe projeto legado. O que existe é manutenção inadequada ou programador vendido para o hype.

Introdução

Muito se fala sobre sistemas legados na área de tecnologia, como se eles fossem automaticamente sinônimo de obsolescência ou ineficiência. Mas será que é mesmo assim? Será que o problema está no software ou em quem o mantém? Este artigo tem como objetivo trazer uma reflexão crítica sobre essa visão generalizada e, por vezes, equivocada de "sistema legado", apontando as raízes desse pensamento que, muitas vezes, está mais relacionado à postura do profissional do que à tecnologia em si.

O Problema da Manutenção Inadequada

O primeiro ponto é a manutenção inadequada. Estamos falando, talvez, de projetos que começaram há 15, talvez 20 anos atrás — não de projetos que começaram há 30 ou 50 anos. Existe uma diferença.

A maior parte dos projetos surgiu com a aceleração da Web. Então, temos muito mais o cenário atual de projetos web que não conseguiram evoluir.

E aí entra a questão: é culpa da tecnologia? Ou do programador? Ou da manutenção inadequada? Ou de um programador incompetente? O que é mais fácil?

É a mentalidade dele, que olha para o projeto, comunica aos stakeholders que o projeto é ruim e que precisa ser refeito. Por quê? Porque pode estar numa linguagem de programação que o programador não gosta.

Isso acontece muito, por exemplo, com PHP — é muito alvo disso. Projetos ASP.NET também, projetos em Delphi, alguns em .NET, projetos em Java muito antigos. E podemos colocar talvez outras linguagens nesse mesmo balaio.

O programador olha e diz: “Esse aqui não está na versão do framework que eu gosto de trabalhar”, então a melhor coisa que ele faz é decretar o projeto como legado. Ao fazer isso, todo mundo no ciclo de desenvolvimento de software passa a pensar sobre aquele software de uma maneira diferente — como se ele fosse morrer, ou que não servisse mais, ou que é muito difícil de manter.

Isso dá um status diferente a esse software em relação aos demais com tecnologias mais atuais.

A Sabotagem do Incompetente

Essa é uma das formas do programador incompetente sabotar aquele projeto. A grande verdade é que, com o tempo, as linguagens de programação tendem a melhorar, não a piorar.

Se você tiver um programador ou uma equipe com uma visão correta sobre o software, você investiria dinheiro na melhora dele. Por quê? Porque ele dá lucro. Se continua dando lucro, precisa continuar recebendo investimento.

E para isso, é preciso contratar gente competente, que saiba manter software. Mas o grande lance dos programadores é que muitos deles querem criar software. Manter é tedioso, chato, complicado. Exige especialidade. O que o cara quer é fazer o CRUD mais simples e bonito, lá na frente, dizer que produziu, entregar em produção, ganhar um tapinha nas costas e, às vezes, um aumento. Mas manter aquele software pelos próximos 10 anos? Esse programador geralmente não está disposto, tá bom?

Então, para esse cara, é sempre melhor — por pura incompetência — condenar o software e querer fazer um novo. Isso é extremamente comum, infelizmente, inclusive entre profissionais de alto escalão, como arquitetos de software.

O Valor da Manutenção Proativa

Investir na manutenção seria, de forma proativa, olhar para as alterações da linguagem e dos frameworks e, progressivamente, implementá-las nesse projeto.

Isso seria investir. Atualizar a versão da linguagem, dos frameworks e correlatos, corrigir questões de segurança, ao mesmo tempo em que se criam novas features e componentes, enquanto partes não utilizadas são desativadas.

Com esse cuidado, é possível manter um software por 20 ou 30 anos, enquanto ele continuar dando lucro. Tanto isso é verdade que empresas ainda usam Java com projetos muito antigos. O COBOL também continua sendo mantido. O próprio Delphi segue recebendo atualizações.

Quem conseguiu trazer seu software para versões mais novas dos frameworks, continua tendo trabalho facilitado pelas ferramentas que escolheu — e sem necessidade de migração para outras linguagens.

Você só deve migrar de um framework para outro quando essa nova linguagem apresentar de fato uma vantagem significativa — não para o programador, mas para o negócio. Quando o negócio exigir uma característica que aquele sistema não tem, aí sim faz sentido migrar.

Por exemplo: você tinha um modelo cliente-servidor em Delphi com banco de dados na rede ou até acessado via internet ou VPN. Quando surgiu o modelo Web, era uma outra forma de fazer o sistema. Se você quisesse as facilidades da Web, precisava migrar para ela.

Isso ficou evidente com o tempo. Existia uma vantagem real de criar sistemas para Web. Qualquer um que não tenha entrado ontem na área de TI entende isso.

O Hype Tecnológico e a Ilusão da Modernidade

A segunda parte da discussão é o hype.

A área de tecnologia é muito guiada pelo hype. Todo mundo quer estar na frente, ser o primeiro. A indústria, por isso, perde a noção de estabilidade. E sem estabilidade, as pessoas querem sempre o “carro mais novo”. Traduzindo: o framework mais novo, a linguagem mais nova.

Por isso, quando o Node.js surgiu para competir no desenvolvimento Web, teve uma adoção em massa. Não porque fosse significativamente melhor, mas porque era novo.

As pessoas gostam do hype. Combinando isso com a expansão da Web, que por si só já cria novos projetos, olhou-se para o Node e disseram: “Esse é o novo sucessor para Web”.

E sim, o Node se estabilizou, ganhou mercado, tem seu público, tem bons sistemas feitos nele. O problema é que a cada nova linguagem, surge um movimento para tentar adotá-la, simplesmente porque é nova — não porque traz vantagens reais para o negócio.

Esse desejo de estar no hype, de ter sempre o “carro mais novo”, sem uma justificativa clara, é um problema. O Node tinha suas razões — principalmente por sua abordagem assíncrona no tratamento de requisições. Outras linguagens até adotaram práticas semelhantes depois. Mas isso não é suficiente para justificar trocas sistemáticas.

A Importância do Foco no Negócio

A gente precisa de motivos de negócio para adotar uma nova tecnologia. Não se pode simplesmente trocar frameworks ou linguagens porque “a gente quer”.

O cliente final não se importa, desde que o resultado seja entregue com qualidade. Pode ser feito manualmente ou automatizado — ele quer o resultado.

Para o gestor de negócio, automatizar é melhor porque evita o fator humano. Áreas de negócio, geralmente, detestam depender de pessoas. Querem processos rápidos e precisos. Infelizmente, o ser humano é impreciso e lento. E é por isso que querem automatizar tudo.

Linguagens de programação são ferramentas para automatizar processos. Quem faz essa automação é o programador. E controlar o ego desse profissional, para que ele entenda que faz parte de um negócio — e não está ali apenas para “experimentar coisas novas” — é algo que demanda trabalho de consciência dentro das empresas.

Conclusão

Resumindo: condenar um projeto como legado é, muitas vezes, questão de incompetência do programador. É algo que acontece demais na nossa área.

Eu mesmo já fiz isso algumas vezes. Mas hoje, entendendo melhor o negócio e a situação das coisas, percebo que condenar projetos como legados foi, sim, uma incompetência minha, e não uma verdade tecnológica ou incontestável.

A grande realidade é: mais vale um legado lucrativo do que um sistema novo no hype que dá prejuízo.

Valeu.

Nóis.


---

Se quiser, posso também adaptar esse conteúdo para publicação em um blog, LinkedIn ou e-book. Deseja isso?

